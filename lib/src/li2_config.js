// Generated by CoffeeScript 1.8.0
var lib, yaml;

lib = require('../../lib');

yaml = require('js-yaml');

lib.Li2Config = (function() {
  var DELIM_ARRAY, DELIM_STRING;

  DELIM_ARRAY = 'array/';

  DELIM_STRING = 'string/';

  Li2Config.prototype.path = "";

  Li2Config.prototype.name = "name";

  Li2Config.prototype.boot = "Li2Boot";

  Li2Config.prototype.assets = "Li2Assets";

  Li2Config.prototype.menu = "Li2Menu";

  Li2Config.prototype.debug = false;

  Li2Config.prototype.renderer = Phaser.CANVAS;

  Li2Config.prototype.width = 320;

  Li2Config.prototype.height = 480;

  Li2Config.prototype.minWidth = 320;

  Li2Config.prototype.minHeight = 480;

  Li2Config.prototype.maxWidth = 640;

  Li2Config.prototype.maxHeight = 960;

  Li2Config.prototype.pageAlignHorizontally = true;

  Li2Config.prototype.pageAlignVertically = true;

  Li2Config.prototype.forceOrientation = false;

  Li2Config.prototype.splashKey = '';

  Li2Config.prototype.splashImg = '';

  Li2Config.prototype.showPreloadBar = false;

  Li2Config.prototype.preloadBarKey = '';

  Li2Config.prototype.preloadBarImg = '';

  Li2Config.prototype.preloadBgdKey = '';

  Li2Config.prototype.preloadBgdImg = '';

  Li2Config.prototype.locale = false;

  Li2Config.prototype.sections = {};

  Li2Config.prototype.audio = {};

  Li2Config.prototype.images = {};

  Li2Config.prototype.sprites = {};

  Li2Config.prototype.tilemaps = {};

  Li2Config.prototype.levels = {};

  Li2Config.prototype.strings = {};

  Li2Config.prototype.arrays = {};

  Li2Config.prototype.preferences = {};


  /*
   * Load configuration
   *
   * @param source  yaml configuration string
   * @param path    base asset path
   */

  function Li2Config(source, path) {
    var raw;
    this.source = source;
    this.path = path != null ? path : '';
    if (this.path.length !== 0) {
      if (this.path[-1] !== '/') {
        this.path += '/';
      }
    }
    raw = yaml.load(this.source);
    this.locale = raw.locale;
    this.name = raw.name;
    this.sections = raw.sections;
    this.minWidth = raw.minWidth;
    this.minHeight = raw.minHeight;
    this.maxWidth = raw.maxWidth;
    this.maxHeight = raw.maxHeight;
    this.pageAlignHorizontally = raw.pageAlignHorizontally;
    this.pageAlignVertically = raw.pageAlignVertically;
    this.forceOrientation = raw.forceOrientation;
    this.splashKey = raw.splashKey;
    this.splashImg = raw.splashImg;
    this.showPreloadBar = raw.showPreloadBar;
    this.preloadBarKey = raw.preloadBarKey;
    this.preloadBarImg = raw.preloadBarImg;
    this.preloadBgdKey = raw.preloadBgdKey;
    this.preloadBgdImg = raw.preloadBgdImg;
    this.audio = raw.audio;
    this.images = raw.images;
    this.sprites = raw.sprites;
    this.levels = raw.levels;
    this.extra = raw.extra;
    this.strings = raw.strings;
  }


  /*
   * Load optional config sections, such as from res/values/strings.yaml
   */

  Li2Config.prototype.setSection = function(name, source) {
    var e, key, str, values, _ref, _results;
    if (name === 'arrays') {
      try {
        _ref = yaml.load(source);
        _results = [];
        for (key in _ref) {
          values = _ref[key];
          this.arrays[key] = [];
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = values.length; _i < _len; _i++) {
              str = values[_i];
              _results1.push(this.arrays[key].push(this.xlate(str)));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      } catch (_error) {
        e = _error;
      }
    } else {
      try {
        return this[name] = yaml.load(source);
      } catch (_error) {
        e = _error;
      }
    }
  };


  /*
   * Translate string value
   */

  Li2Config.prototype.xlate = function(value) {
    if ('string' === typeof value) {
      if (value.indexof(DELIM_STRING) === 0) {
        return this.strings[values.replace(DELIM_STRING, '')];
      } else if (value.indexOf(DELIM_ARRAY) === 0) {
        return this.strings[values.replace(DELIM_ARRAY, '')];
      } else {
        return value;
      }
    } else {
      return value;
    }
  };

  return Li2Config;

})();

//# sourceMappingURL=li2_config.js.map
