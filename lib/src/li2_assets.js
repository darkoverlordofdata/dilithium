// Generated by CoffeeScript 1.8.0
var lib,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

lib = require('../../lib');

lib.Li2Assets = (function(_super) {
  __extends(Li2Assets, _super);

  Li2Assets.prototype.splashScreen = null;

  Li2Assets.prototype.config = {};

  function Li2Assets(config) {
    this.config = config;
  }

  Li2Assets.prototype.preload = function() {
    var k, key, level, levelName, preloadBar, preloadBgd, sprite, v, _ref, _ref1, _ref2, _ref3;
    if (this.config.splashKey !== '') {
      this.load.setPreloadSprite(this.add.sprite(0, 0, this.config.splashKey));
    }
    if (this.config.preloadBarKey !== '') {
      preloadBgd = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, this.config.preloadBgdKey);
      preloadBar = this.add.sprite(this.game.width / 2 - 250, this.game.height - 100, this.config.preloadBarKey);
      this.load.setPreloadSprite(preloadBar);
    }
    if (this.config.audio) {
      _ref = this.config.audio;
      for (k in _ref) {
        v = _ref[k];
        this.load.audio(k, this.config.path + v);
      }
    }
    if (this.config.images) {
      _ref1 = this.config.images;
      for (k in _ref1) {
        v = _ref1[k];
        this.load.image(k, this.config.path + v);
      }
    }
    if (this.config.tilemaps) {
      _ref2 = this.config.tilemaps;
      for (k in _ref2) {
        level = _ref2[k];
        levelName = level.options.map;
        this.load.tilemap(levelName, this.config.path + ("levels/" + levelName.json), null, Phaser.Tilemap.TILED_JSON);
      }
    }
    if (this.config.sprites) {
      _ref3 = this.config.sprites;
      for (key in _ref3) {
        sprite = _ref3[key];
        if ('string' === typeof sprite.file) {
          this.load.spritesheet(key, this.config.path + sprite.file, sprite.width, sprite.height);
        } else {
          if (sprite['selected'] === true) {
            this.load.spritesheet(key, this.config.path + sprite.file[sprite.selected], sprite.width, sprite.height);
          }
          sprite.file.forEach((function(_this) {
            return function(file, ix) {
              return _this.load.spritesheet("" + key + "[" + ix + "]", _this.config.path + file, sprite.width, sprite.height);
            };
          })(this));
        }
      }
    }
  };

  Li2Assets.prototype.create = function() {
    return this.state.start(this.config.menu, true, false);
  };

  return Li2Assets;

})(Phaser.State);

//# sourceMappingURL=li2_assets.js.map
