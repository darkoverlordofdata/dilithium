// Generated by CoffeeScript 1.8.0
var lib,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

lib = require('../../lib');

lib.Li2Boot = (function(_super) {
  __extends(Li2Boot, _super);

  Li2Boot.prototype.orientated = false;

  Li2Boot.prototype.config = {};

  function Li2Boot(config) {
    this.config = config;
  }

  Li2Boot.prototype.preload = function() {
    if (this.config.splashKey !== '') {
      this.load.image(this.config.splashKey, this.config.path + this.config.splashImg);
    }
    if (this.config.preloadBarKey !== '') {
      this.load.image(this.config.preloadBarKey, this.config.path + this.config.preloadBarImg);
      return this.load.image(this.config.preloadBgdKey, this.config.path + this.config.preloadBgdImg);
    }
  };

  Li2Boot.prototype.create = function() {
    this.input.maxPointers = 1;
    this.stage.disableVisibilityChange = true;
    if (this.game.device.desktop) {
      this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.scale.minWidth = this.config.minWidth;
      this.scale.minHeight = this.config.minHeight;
      this.scale.maxWidth = this.config.maxWidth;
      this.scale.maxHeight = this.config.maxHeight;
      this.scale.pageAlignHorizontally = this.config.pageAlignHorizontally;
      this.scale.pageAlignVertically = this.config.pageAlignVertically;
      this.scale.setScreenSize(true);
    } else {
      this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.scale.minWidth = this.config.minWidth;
      this.scale.minHeight = this.config.minHeight;
      this.scale.maxWidth = this.config.maxWidth;
      this.scale.maxHeight = this.config.maxHeight;
      this.scale.pageAlignHorizontally = this.config.pageAlignHorizontally;
      this.scale.pageAlignVertically = this.config.pageAlignVertically;
      this.scale.setScreenSize(true);
      if (this.config.forceOrientation) {
        this.scale.forceOrientation(this.config.pageAlignHorizontally, this.config.pageAlignVertically);
        this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
        this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
      }
    }
    return this.state.start(this.config.assets, true, false);
  };

  Li2Boot.prototype.gameResized = function(width, height) {};

  Li2Boot.prototype.enterIncorrectOrientation = function() {
    this.orientated = false;
    return document.getElementById('orientation').style.display = 'block';
  };

  Li2Boot.prototype.leaveIncorrectOrientation = function() {
    this.orientated = true;
    return document.getElementById('orientation').style.display = 'none';
  };

  return Li2Boot;

})(Phaser.State);

//# sourceMappingURL=li2_boot.js.map
