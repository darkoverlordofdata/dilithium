// Generated by CoffeeScript 1.8.0
var li2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

li2 = require('../../lib');

li2.Dilithium = (function(_super) {
  __extends(Dilithium, _super);

  Dilithium.prototype.config = null;

  Dilithium.prototype.game = null;


  /*
   * Static Using ...
   *
   * @param path     path to config file root
   * @paran complete completer function
   */

  Dilithium.using = function(path, complete) {
    var httpConfig;
    httpConfig = new XMLHttpRequest();
    httpConfig.onreadystatechange = function() {
      var config, done, flag, i, name, section, sections, src, _i, _j, _k, _len, _len1, _ref, _ref1;
      if (httpConfig.readyState === 4 && httpConfig.status === 200) {
        config = new li2.Li2Config(httpConfig.responseText, path);
        sections = [];
        if (config.sections.strings != null) {
          sections.push({
            name: 'strings',
            src: config.sections.strings,
            http: new XMLHttpRequest()
          });
          if (config.locale) {
            sections.push({
              name: 'strings',
              src: config.sections.strings.replace('.yaml', "-" + window.navigator.language + ".yaml"),
              http: new XMLHttpRequest()
            });
          }
        }
        _ref = config.sections;
        for (name in _ref) {
          src = _ref[name];
          if (name !== 'strings') {
            sections.push({
              name: name,
              src: src,
              http: new XMLHttpRequest()
            });
          }
        }
        if (sections.length === 0) {
          return complete(config);
        }
        flag = 0;
        done = 0;
        for (i = _i = 0, _ref1 = sections.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          done += Math.pow(2, i);
        }
        for (_j = 0, _len = sections.length; _j < _len; _j++) {
          section = sections[_j];
          section.http.onreadystatechange = function() {
            var check, m, _k, _l, _len1, _ref2, _ref3;
            for (check = _k = 0, _ref2 = sections.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; check = 0 <= _ref2 ? ++_k : --_k) {
              if (sections[check].http.readyState === 4 && ((_ref3 = sections[check].http.status) === 200 || _ref3 === 404)) {
                flag |= Math.pow(2, check);
              }
            }
            if (flag === done) {
              for (_l = 0, _len1 = sections.length; _l < _len1; _l++) {
                m = sections[_l];
                if (m.http.status === 200) {
                  config.setSection(m.name, m.http.responseText);
                }
              }
              complete(config);
            }
          };
        }
        for (_k = 0, _len1 = sections.length; _k < _len1; _k++) {
          section = sections[_k];
          section.http.open('GET', "" + path + "/" + section.src, true);
          section.http.send();
        }
      } else if (httpConfig.readyState === 4 && httpConfig.status !== 200) {
        config = new li2.Li2Config('', path);
        complete(config);
      }
    };
    httpConfig.open('GET', "" + path + "/config.yaml", false);
    httpConfig.send();
  };


  /*
   * == New Game ==
   *   * Set the screen dimensions
   *   * Configure the game states
   *   * Start the game
   *
   * returns this
   */

  function Dilithium(config) {
    this.config = config;
    console.log("Dilithium v0.2.0");
    this.game = new Phaser.Game(this.config.width, this.config.height, this.config.renderer, '', this);
  }


  /*
   * Create the game states and start the game
   */

  Dilithium.prototype.create = function() {
    this.game.state.add(this.config.boot, new li2.Li2Boot(this.config));
    this.game.state.add(this.config.assets, new li2.Li2Assets(this.config));
    this.game.state.add(this.config.menu, this.levels());
    return this.game.state.start(this.config.boot);
  };


  /*
   * Override to define game states
   */

  Dilithium.prototype.levels = function() {};

  return Dilithium;

})(Phaser.State);

//# sourceMappingURL=dilithium.js.map
